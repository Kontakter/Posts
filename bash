Последний месяц я программировал на баше и хочу поделиться своими впечатлениями.
Года два назад мне приходилось писать нетривиальный скрипт с использованием баша и это было отвратительно.

В этот раз у меня был достаточно интересный проект, связанный с гитом.
В итоге получился скрипт строк на 100-150 и еще столько же (по объему) тестов к нему.

Общее впечатление такое: на баше тоже можно писать код, в меру эффективный и понятный, но все-таки лучше этого не делать. 

Ниже я хочу обсудить следующие вопросы: почему люди до сих пор используют баш, недостатки этого подхода, и что же делать,
если вы все-таки пишите на баше. Итак, начнем.


Меня всегда удивляло две вещи: сколько всякой фигни написано на баше и гордость людей за то, что они умеют производить
на свет `баш-скрипты`. Теперь я не удивляюсь, потому что начинаю понимать природу этих вещей.
А причина всего очень простая: на баше можно писать сложные, непонятные, короткие и полезные программы.
Взрывная смесь этих четырех качеств приводит к удивительным последствиям.
Чтобы объяснить подробней, я расскажу маленькую выдуманную историю, которую тем не менее часто приходится встречать в жизни:

Абстрактный программист, уже немного изучивший sed, awk и прочие утилиты, за полдня пишет скрипт,
который вызывает 5 разных утилит, парсит их ответы, что-то компанует, работает со строками и.т.п.
При написании скрипта он 90% времени потратил на чтении man-ов и гугление готовых решений.

В итоге получается 50 строк, в которых пара несложных sed выражений, одна регулярка в 30 символов,
две однострочных программки на awk, вызовы программ cat, find, grep, sort c кучей разных ключей.
Этот скрипт работает и возможно действительно делает нечто не совсем тривиальное, например,
сортирует музыкальную коллекцию автора, или скачивает библиотеку из репозитория и собирает из нее пакет,
или парсит логи какой-нибудь системы и параллельно считает разные статистики по этим логам.

Абстрактный программист естественно очень горд за себя, он сделал еще один шаг к тому, чтобы стать гуру
Линукса, написал полезную тулзу. Поэтому он идет и выкладывает свой скрипт в репозиторий или постит его на
каком-нибудь форуме и бежит хвастаться друзьям. А теперь давайте взглянем правде в глаза: 
1. Скрипт совершенно нечитаем, и через месяц в нем не сможет разобраться даже автор.
   (лично я еще не видел людей, которые могли бы за минуту прочитать и понять regexp состоящий более чем из 20 символов).
2. Скорее всего скрипт работает лишь в 2 из 10 use-case-ов, на которых самолично тренировался автор.
   В скрипте точно есть баги, где-нибудь не хватает пробела, но в силу конкретных обстоятельств все работает.
3. Наверняка автор использовала кучу вещей, которые уже стояли у него на машине, или которые он поставил в ходе
   разработки этого скрипта. То есть из коробки ни у кого ничего работать не будет.

Вывод: если вы пишите на баше, то в 99% случаев никому не говорите об этом, и уж точно не никому не показывайте свои программы.
Вы же не хотите позориться, ведь правда?


Теперь я хочу рассказать как же писать на баше, точнее на sh-e. Изложу это в виде списка советов:

0. Не пишите на баше. Нет, я серьезно: не пишите на баше, в современном мире есть python, он почти ничем не хуже, зато гораздо более понятен и дружелюбен. На крайний случай есть perl и много других скриптовых языков программирования. 

1. Почему sh? Нынче баш немного теряет популярность, да и особых приемуществ он не дает. В моем понимании баш нужен только для того, чтобы удобно настроить вашу рабочую оболочку в Unix-style системах.
   Здесь bash идеален -- он есть на всех машинах, куда бы вы не пришли просто возьмите с собой bashrc, bash_completion и вам будет удобно работать.

2. Используйте понятные имена переменных, даже если пишете код только для себя.

3. Используйте функции, это очень просто, например:
my_function() {
    local varA varB
    varA = $1
    ....
}

x=`my_func "123"`

И не забывайте, что все переменные по-умолчанию являются глобальными.

4. Используйте поэлементные циклы (только для sh):
NAMES="Ignat Ivan Gleb Michael"
for name in ${NAMES}; do
    ...
done
!!! sh чувствителен к пробелам и переносам строк. Semicolon заменяет перенос строки.

5. Всегда используйте ключи -e и -u (в шапке пишу #!/bin/sh -eu).
   Ключ -e заставляет скрипт падать, если какая-то подпрограмма вернула ненулевой код возврата. С ключом -u скрипт будет выдавать ошибку, если вы используете необъявленную переменную.

6. Используйте операторы && и ||. Очень частый use-case такой:

die() { echo "my_program: $*" >&2; exit 1; }

[ -n $1 ] || die "There is no first argument"

или такой: 
mkdir -p "${mydir}" && cd "${mydir}" && git clone "${myurl}" . || die "..."

!!! Всегда оборачивайте все аргументы в кавычки, так как в жизни встречаются пробелы и пустые строки.

7. Если вы хотите что-то узнать про файл или переменную, то прочитайте `man [` . Узнаете много полезного. Да, кстати, хватит уже просить помощи у гугла -- научитесь читать man.

8. Не забываем писать комментарии ко всем нетривиальным операциям, которые делает ваш скрипт. Если вы написали regexp, будьте добры, расскажите окружающим, что же он делает.

9. Если вам нужна нетривиальная логика работы с числами и массивам или если вам, не дай бог, нужны map-ы, то настоятельно рекомендую переключиться на другой язык программирования.
   При желании, вы найдете все это в баше, но столкнетесь с немалым количеством сложностей. Давайте не будем усложнять себе жизнь и воспользуемся другим языком. В крайнем случае
   сделайте так:
echo '#!/bin/env python
....
' > aux_prog.py

res = `python aux_prog.py < `

Этот список можно еще долго продолжать, главное всегда помните про нулевой пункт. Несомненная польза баша состоит лишь в создании вашего bashrc и в быстром и
эффективном написании маленьких полезных скриптов, которые упрощают вам жизнь. Про то, как писать такие скрипты, и что должно лежать в bashrc 
можно написать еще два поста, поэтому на этом я закончю свой рассказ.

Надеюсь, данный пост было приятно читать, и каждый узнал для себя что-нибудь новое.

